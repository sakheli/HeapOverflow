//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HeapOverflow.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        WCF.DataContract.UserContract Login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<WCF.DataContract.UserContract> LoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        bool Register(WCF.DataContract.UserContract user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(WCF.DataContract.UserContract user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPost", ReplyAction="http://tempuri.org/IService1/AddPostResponse")]
        bool AddPost(WCF.DataContract.PostContract post, int categoryId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPost", ReplyAction="http://tempuri.org/IService1/AddPostResponse")]
        System.Threading.Tasks.Task<bool> AddPostAsync(WCF.DataContract.PostContract post, int categoryId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddReply", ReplyAction="http://tempuri.org/IService1/AddReplyResponse")]
        bool AddReply(WCF.DataContract.PostContract post, WCF.DataContract.ReplyContract reply, WCF.DataContract.UserContract user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddReply", ReplyAction="http://tempuri.org/IService1/AddReplyResponse")]
        System.Threading.Tasks.Task<bool> AddReplyAsync(WCF.DataContract.PostContract post, WCF.DataContract.ReplyContract reply, WCF.DataContract.UserContract user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPosts", ReplyAction="http://tempuri.org/IService1/GetPostsResponse")]
        WCF.DataContract.PostContract[] GetPosts(WCF.DataContract.CategoryContract category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPosts", ReplyAction="http://tempuri.org/IService1/GetPostsResponse")]
        System.Threading.Tasks.Task<WCF.DataContract.PostContract[]> GetPostsAsync(WCF.DataContract.CategoryContract category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPost", ReplyAction="http://tempuri.org/IService1/GetPostResponse")]
        WCF.DataContract.PostContract GetPost(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPost", ReplyAction="http://tempuri.org/IService1/GetPostResponse")]
        System.Threading.Tasks.Task<WCF.DataContract.PostContract> GetPostAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPostsByUserId", ReplyAction="http://tempuri.org/IService1/GetPostsByUserIdResponse")]
        WCF.DataContract.PostContract[] GetPostsByUserId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPostsByUserId", ReplyAction="http://tempuri.org/IService1/GetPostsByUserIdResponse")]
        System.Threading.Tasks.Task<WCF.DataContract.PostContract[]> GetPostsByUserIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemovePost", ReplyAction="http://tempuri.org/IService1/RemovePostResponse")]
        bool RemovePost(int userId, WCF.DataContract.PostContract post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemovePost", ReplyAction="http://tempuri.org/IService1/RemovePostResponse")]
        System.Threading.Tasks.Task<bool> RemovePostAsync(int userId, WCF.DataContract.PostContract post);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMod", ReplyAction="http://tempuri.org/IService1/AddModResponse")]
        bool AddMod(int adminId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMod", ReplyAction="http://tempuri.org/IService1/AddModResponse")]
        System.Threading.Tasks.Task<bool> AddModAsync(int adminId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveMod", ReplyAction="http://tempuri.org/IService1/RemoveModResponse")]
        bool RemoveMod(int adminId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveMod", ReplyAction="http://tempuri.org/IService1/RemoveModResponse")]
        System.Threading.Tasks.Task<bool> RemoveModAsync(int adminId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCategory", ReplyAction="http://tempuri.org/IService1/AddCategoryResponse")]
        bool AddCategory(int adminId, WCF.DataContract.CategoryContract category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddCategory", ReplyAction="http://tempuri.org/IService1/AddCategoryResponse")]
        System.Threading.Tasks.Task<bool> AddCategoryAsync(int adminId, WCF.DataContract.CategoryContract category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveCategory", ReplyAction="http://tempuri.org/IService1/RemoveCategoryResponse")]
        bool RemoveCategory(int adminId, int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveCategory", ReplyAction="http://tempuri.org/IService1/RemoveCategoryResponse")]
        System.Threading.Tasks.Task<bool> RemoveCategoryAsync(int adminId, int categoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeTitle", ReplyAction="http://tempuri.org/IService1/ChangeTitleResponse")]
        bool ChangeTitle(int userId, int postId, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeTitle", ReplyAction="http://tempuri.org/IService1/ChangeTitleResponse")]
        System.Threading.Tasks.Task<bool> ChangeTitleAsync(int userId, int postId, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        WCF.DataContract.UserContract[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        System.Threading.Tasks.Task<WCF.DataContract.UserContract[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCategories", ReplyAction="http://tempuri.org/IService1/GetCategoriesResponse")]
        WCF.DataContract.CategoryContract[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCategories", ReplyAction="http://tempuri.org/IService1/GetCategoriesResponse")]
        System.Threading.Tasks.Task<WCF.DataContract.CategoryContract[]> GetCategoriesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : HeapOverflow.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<HeapOverflow.ServiceReference1.IService1>, HeapOverflow.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCF.DataContract.UserContract Login(string email, string password) {
            return base.Channel.Login(email, password);
        }
        
        public System.Threading.Tasks.Task<WCF.DataContract.UserContract> LoginAsync(string email, string password) {
            return base.Channel.LoginAsync(email, password);
        }
        
        public bool Register(WCF.DataContract.UserContract user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(WCF.DataContract.UserContract user) {
            return base.Channel.RegisterAsync(user);
        }
        
        public bool AddPost(WCF.DataContract.PostContract post, int categoryId, int userId) {
            return base.Channel.AddPost(post, categoryId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> AddPostAsync(WCF.DataContract.PostContract post, int categoryId, int userId) {
            return base.Channel.AddPostAsync(post, categoryId, userId);
        }
        
        public bool AddReply(WCF.DataContract.PostContract post, WCF.DataContract.ReplyContract reply, WCF.DataContract.UserContract user) {
            return base.Channel.AddReply(post, reply, user);
        }
        
        public System.Threading.Tasks.Task<bool> AddReplyAsync(WCF.DataContract.PostContract post, WCF.DataContract.ReplyContract reply, WCF.DataContract.UserContract user) {
            return base.Channel.AddReplyAsync(post, reply, user);
        }
        
        public WCF.DataContract.PostContract[] GetPosts(WCF.DataContract.CategoryContract category) {
            return base.Channel.GetPosts(category);
        }
        
        public System.Threading.Tasks.Task<WCF.DataContract.PostContract[]> GetPostsAsync(WCF.DataContract.CategoryContract category) {
            return base.Channel.GetPostsAsync(category);
        }
        
        public WCF.DataContract.PostContract GetPost(int id) {
            return base.Channel.GetPost(id);
        }
        
        public System.Threading.Tasks.Task<WCF.DataContract.PostContract> GetPostAsync(int id) {
            return base.Channel.GetPostAsync(id);
        }
        
        public WCF.DataContract.PostContract[] GetPostsByUserId(int id) {
            return base.Channel.GetPostsByUserId(id);
        }
        
        public System.Threading.Tasks.Task<WCF.DataContract.PostContract[]> GetPostsByUserIdAsync(int id) {
            return base.Channel.GetPostsByUserIdAsync(id);
        }
        
        public bool RemovePost(int userId, WCF.DataContract.PostContract post) {
            return base.Channel.RemovePost(userId, post);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePostAsync(int userId, WCF.DataContract.PostContract post) {
            return base.Channel.RemovePostAsync(userId, post);
        }
        
        public bool AddMod(int adminId, int userId) {
            return base.Channel.AddMod(adminId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> AddModAsync(int adminId, int userId) {
            return base.Channel.AddModAsync(adminId, userId);
        }
        
        public bool RemoveMod(int adminId, int userId) {
            return base.Channel.RemoveMod(adminId, userId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveModAsync(int adminId, int userId) {
            return base.Channel.RemoveModAsync(adminId, userId);
        }
        
        public bool AddCategory(int adminId, WCF.DataContract.CategoryContract category) {
            return base.Channel.AddCategory(adminId, category);
        }
        
        public System.Threading.Tasks.Task<bool> AddCategoryAsync(int adminId, WCF.DataContract.CategoryContract category) {
            return base.Channel.AddCategoryAsync(adminId, category);
        }
        
        public bool RemoveCategory(int adminId, int categoryId) {
            return base.Channel.RemoveCategory(adminId, categoryId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveCategoryAsync(int adminId, int categoryId) {
            return base.Channel.RemoveCategoryAsync(adminId, categoryId);
        }
        
        public bool ChangeTitle(int userId, int postId, string title) {
            return base.Channel.ChangeTitle(userId, postId, title);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeTitleAsync(int userId, int postId, string title) {
            return base.Channel.ChangeTitleAsync(userId, postId, title);
        }
        
        public WCF.DataContract.UserContract[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<WCF.DataContract.UserContract[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public WCF.DataContract.CategoryContract[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<WCF.DataContract.CategoryContract[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
    }
}
